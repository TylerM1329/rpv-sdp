% Parameters
waypoints = [34.0, 117.0;    % Initial point
             34.01, 117.02;  % Target 1
             34.04, 117.04;  % Target 2
             34.09, 117.06]; % Target 3 (can add more points as needed)
speed = 0.001; % Constant speed per iteration (degrees per time step)

% Conversion from degrees to radians
degToRad = @(deg) deg * pi / 180;
radToDeg = @(rad) rad * 180 / pi;

% Distance threshold to stop at each waypoint
distance_threshold = 0.0005; % Small distance threshold to end loop (degrees)

% Initialize current position (starting point)
lat_curr = waypoints(1, 1);
lon_curr = waypoints(1, 2);

% Plotting setup
figure;
hold on;
grid on;
xlabel('Longitude');
ylabel('Latitude');
title('Vehicle Simulation Following Multiple Waypoints');
plot(waypoints(:, 2), waypoints(:, 1), 'r*', 'MarkerSize', 10); % Plot all waypoints
plot(lon_curr, lat_curr, 'bo'); % Initial position

% Initialize target index
target_index = 2; % Start at the first target waypoint

% Simulation loop
max_iterations = 10000; % Set a limit on iterations
iteration = 0;

while target_index <= size(waypoints, 1)
    % Get current target coordinates
    lat_target = waypoints(target_index, 1);
    lon_target = waypoints(target_index, 2);
    
    % Calculate bearing (course angle) from current position to target
    lat1_rad = degToRad(lat_curr);
    lon1_rad = degToRad(lon_curr);
    lat2_rad = degToRad(lat_target);
    lon2_rad = degToRad(lon_target);
    
    dLon = lon2_rad - lon1_rad;
    
    x = sin(dLon) * cos(lat2_rad);
    y = cos(lat1_rad) * sin(lat2_rad) - sin(lat1_rad) * cos(lat2_rad) * cos(dLon);
    
    bearing = atan2(x, y); % Bearing in radians

    % Update current position
    lat_curr = lat_curr + speed * cos(bearing);
    lon_curr = lon_curr + speed * sin(bearing);

    % Plot the current position
    plot(lon_curr, lat_curr, 'bo');
    pause(0.1); % Pause for visualization

    % Check if the vehicle is close enough to the target
    dist_to_target = sqrt((lat_target - lat_curr)^2 + (lon_target - lon_curr)^2);
    if dist_to_target < distance_threshold
        disp(['Reached target ', num2str(target_index)]);
        target_index = target_index + 1; % Move to the next target
    end

    % Check if maximum iterations have been reached
    iteration = iteration + 1;
    if iteration > max_iterations
        disp('Maximum iterations reached. Stopping simulation.');
        break;
    end
end

% Final plot
plot(lon_curr, lat_curr, 'g*', 'MarkerSize', 10); % Final position
hold off;

